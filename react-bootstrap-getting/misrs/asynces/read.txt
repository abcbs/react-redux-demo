'use strict';

var f = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        return _context.abrupt('return', 'hello world');

                    case 1:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function f() {
        return _ref.apply(this, arguments);
    };
}();

function _asyncToGenerator(fn) { return function () {
	var gen = fn.apply(this, arguments);
	return new Promise(function (resolve, reject) {
		function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) {
			reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) {
				step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

f().then(function (v) {
    return console.log(v);
});

var sleep = function sleep(time) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve(123);
        }, time);
    });
};

var start = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var _f;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.prev = 0;

                        console.log('start async');
                        _context2.next = 4;
                        return sleep(1);

                    case 4:
                        _f = _context2.sent;

                        console.log('await end,result->', _f);
                        _context2.next = 11;
                        break;

                    case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2['catch'](0);

                        console.log(_context2.t0);

                    case 11:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this, [[0, 8]]);
    }));

    return function start() {
        return _ref2.apply(this, arguments);
    };
}();

var end = function end() {
    console.log('start end common');
};

module.exports = {
    start: start,
    end: end
};